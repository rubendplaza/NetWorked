{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","components/Background.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","phone","company","className","alt","src","CardList","connections","map","user","i","key","index","first","last","SearchBox","searchChange","aria-label","id","type","placeholder","onChange","Scroll","children","Header","nextProps","nextState","href","React","Component","ErrorBoundary","state","hasError","error","info","this","setState","App","onRequestConnections","searchField","onSearchChange","isPending","filteredConnections","filter","connection","toLowerCase","includes","connect","searchConnections","requestConnections","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Background","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateConnections","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c163965e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = (props) => {\n  const { name, email, phone, company } = props;\n  return (\n    <div className=\"tc dib pa3 ma3 grow shadow-2 card ba bw2\">\n      <img\n        alt=\"Profile Pic\"\n        src={`https://avatars.dicebear.com/api/avataaars/${email}.svg?w=200&h=150`}\n      />\n      <div>\n        <h2>{name}</h2>\n        <p>{company}</p>\n        <p>{phone}</p>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"./CardList.css\";\n\nconst CardList = ({ connections }) => {\n  return (\n    <div className=\"tc grid-item\">\n      {connections.map((user, i) => {\n        return (\n          <Card\n            key={user.index}\n            name={`${user.name.first} ${user.name.last}`}\n            email={user.email}\n            phone={user.phone}\n            company={user.company}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport \"./SearchBox.css\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"ma4 search\">\n      <input\n        aria-label=\"Search Network Connections\"\n        id=\"search\"\n        className=\"bw2 pa3 ba\"\n        type=\"search\"\n        placeholder=\"Search Network\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div className='cardListContainer'>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from \"react\";\nimport \"./Header.css\";\n\nclass Header extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n  render() {\n    return (\n      <nav className=\"navBar sticky\">\n        <ul className=\"main-nav\">\n          <li className=\"linkItem\">\n            <a href=\"google.com\" className=\"link appName\">\n              NetWorked\n            </a>\n          </li>\n          <li className=\"linkItem push\">\n            <a href=\"google.com\" className=\"link\">\n              About\n            </a>\n          </li>\n          <li className=\"linkItem\">\n            <a href=\"google.com\" className=\"link\">\n              Contact\n            </a>\n          </li>\n          <li className=\"linkItem\">\n            <a href=\"google.com\" className=\"link\">\n              Team\n            </a>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            hasError: false \n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render(){\n        if(this.state.hasError) {\n            return (\n                <h1>Error Has Occurred</h1>\n            );\n        }\n        return (\n            this.props.children\n        );\n    }\n}\n\nexport default ErrorBoundary;","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport Header from \"../components/Header\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nimport { setSearchField, requestConnections } from \"../actions\";\n\n//tell me what piece of state I need to listen to and send down as props\nconst mapStateToProps = (state) => {\n  return {\n    //these fields come from the reducers\n    searchField: state.searchConnections.searchField,\n    connections: state.requestConnections.connections,\n    isPending: state.requestConnections.isPending,\n    error: state.requestConnections.error,\n  };\n};\n\n//dispatch triggers the action\n//what props should I listen to that are actions that need to get dispatched\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestConnections: () => dispatch(requestConnections()),\n  };\n};\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.props.onRequestConnections();\n  }\n\n  render() {\n    const { searchField, onSearchChange, connections, isPending } = this.props;\n    const filteredConnections = connections.filter((connection) => {\n      return (\n        connection.name.first\n          .toLowerCase()\n          .includes(searchField.toLowerCase()) ||\n        connection.name.last.toLowerCase().includes(searchField.toLowerCase())\n      );\n    });\n    return isPending ? (\n      <div className=\"loadingContainer\">\n        <h1 className=\"loadingTag\">Loading...</h1>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList connections={filteredConnections} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n//connect is a higher order function that returns another function that will be passed App\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CONNECTIONS_PENDING,\n    REQUEST_CONNECTIONS_SUCCESS,\n    REQUEST_CONNECTIONS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    //action being taken\n    type: CHANGE_SEARCH_FIELD,\n    //sending the data to reducer\n    payload: text\n})\n\n//redux-thunk since we are returning a function and not an object will send us the dispatch allowing us to do this\nexport const requestConnections = () => (dispatch) => {\n    dispatch({ type: REQUEST_CONNECTIONS_PENDING });\n    fetch('https://next.json-generator.com/api/json/get/N1hbZK16u')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_CONNECTIONS_SUCCESS, payload: data }))\n        .catch(err => dispatch({ type: REQUEST_CONNECTIONS_FAILED, payload: err }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CONNECTIONS_PENDING = 'REQUEST_CONNECTIONS_PENDING';\nexport const REQUEST_CONNECTIONS_SUCCESS = 'REQUEST_CONNECTIONS_SUCCESS';\nexport const REQUEST_CONNECTIONS_FAILED = 'REQUEST_CONNECTIONS_FAILED';","import React from 'react';\nimport './Background.css'\n\nconst Background = () => {\n    return (\n        <div>\n            <div className=\"bg\"></div>\n            <div className=\"bg bg2\"></div>\n            <div className=\"bg bg3\"></div>\n        </div>\n        \n    );\n}\n\nexport default Background;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_CONNECTIONS_PENDING,\n  REQUEST_CONNECTIONS_SUCCESS,\n  REQUEST_CONNECTIONS_FAILED,\n} from \"./constants.js\";\n\nconst initialStateSearch = {\n  searchField: \"\",\n};\n\nexport const searchConnections = (state = initialStateSearch, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateConnections = {\n  isPending: true,\n  connections: [],\n  error: \"\",\n};\n\nexport const requestConnections = (\n  state = initialStateConnections,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_CONNECTIONS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_CONNECTIONS_SUCCESS:\n      return Object.assign({}, state, {\n        connections: action.payload,\n        isPending: false,\n      });\n    case REQUEST_CONNECTIONS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport Background from \"./components/Background\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nimport { searchConnections, requestConnections } from \"./reducers\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchConnections, requestConnections });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Background />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}