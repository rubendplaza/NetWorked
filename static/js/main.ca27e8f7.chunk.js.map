{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/Header.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","components/Background.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","name","email","phone","company","className","alt","src","CardList","connections","map","user","i","key","index","first","last","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","Header","href","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onRequestConnections","searchField","onSearchChange","isPending","filteredConnections","filter","connection","toLowerCase","includes","connect","searchConnections","requestConnections","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","err","Background","Boolean","window","location","hostname","match","initialStateSearch","initialStateConnections","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ca27e8f7.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst Card = (props) => {\n    const { name, email, phone, company } = props;\n    return (\n        <div className='tc dib pa3 ma3 grow shadow-2 card ba bw2'>\n            <img alt='Profile Pic' src={`https://avatars.dicebear.com/api/avataaars/${email}.svg?w=250&h=200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{company}</p>\n                <p>{phone}</p>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport './CardList.css';\n\n const CardList = ({ connections }) => {\n     return (\n        <div className=\"tc grid-item\">\n            {\n                connections.map((user, i) => {\n                    return (\n                        <Card \n                        key={user.index} \n                        name={`${user.name.first} ${user.name.last}`} \n                        email={user.email}\n                        phone={user.phone}\n                        company={user.company}\n                        />\n                    );\n                })\n            }\n        </div>\n     );\n }\n\n export default CardList;","import React from 'react';\nimport './SearchBox.css';\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='ma4 search'>\n            <input\n            className='bw2 pa3 ba' \n            type='search' \n            placeholder='Search Network' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\nimport './Scroll.css'\n\nconst Scroll = (props) => {\n    return (\n        <div className='cardListContainer'>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n    return (\n        <nav className='navBar sticky'>\n            <ul className='main-nav'>\n                <li className='linkItem'><a href='google.com' className='link appName'>NetWorked</a></li>\n                <li className='linkItem push'><a href='google.com' className='link'>About</a></li>\n                <li className='linkItem'><a href='google.com' className='link'>Contact</a></li>\n                <li className='linkItem'><a href='google.com' className='link'>Team</a></li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            hasError: false \n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render(){\n        if(this.state.hasError) {\n            return (\n                <h1>Error Has Occurred</h1>\n            );\n        }\n        return (\n            this.props.children\n        );\n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\n\nimport { setSearchField, requestConnections } from '../actions';\n\n//tell me what piece of state I need to listen to and send down as props\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchConnections.searchField,\n        connections: state.requestConnections.connections,\n        isPending: state.requestConnections.isPending,\n        error: state.requestConnections.error\n    }\n}\n\n//dispatch triggers the action\n//what props should I listen to that are actions that need to get dispatched\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestConnections: () => dispatch(requestConnections())\n    }\n}\n\nclass App extends React.Component {\n\n    componentDidMount() {\n        this.props.onRequestConnections();\n    }\n\n    render() {\n        const { searchField, onSearchChange, connections, isPending } = this.props;\n        const filteredConnections = connections.filter(connection => {\n            return (connection.name.first.toLowerCase().includes(searchField.toLowerCase()) || connection.name.last.toLowerCase().includes(searchField.toLowerCase()))\n        });\n        return isPending ? \n            (\n                <div className='loadingContainer'>\n                    <h1 className='loadingTag'>Loading...</h1>\n                </div>\n            )\n            :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList connections={filteredConnections}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\n//connect is a higher order function that returns another function that will be passed App\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CONNECTIONS_PENDING,\n    REQUEST_CONNECTIONS_SUCCESS,\n    REQUEST_CONNECTIONS_FAILED\n} from './constants.js';\n\nexport const setSearchField = (text) => ({\n    //action being taken\n    type: CHANGE_SEARCH_FIELD,\n    //sending the data to reducer\n    payload: text\n})\n\n//redux-thunk since we are returning a function and not an object will send us the dispatch allowing us to do this\nexport const requestConnections = () => (dispatch) => {\n    dispatch({ type: REQUEST_CONNECTIONS_PENDING });\n    fetch('https://next.json-generator.com/api/json/get/N1hbZK16u')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_CONNECTIONS_SUCCESS, payload: data }))\n        .catch(err => dispatch({ type: REQUEST_CONNECTIONS_FAILED, payload: err }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_CONNECTIONS_PENDING = 'REQUEST_CONNECTIONS_PENDING';\nexport const REQUEST_CONNECTIONS_SUCCESS = 'REQUEST_CONNECTIONS_SUCCESS';\nexport const REQUEST_CONNECTIONS_FAILED = 'REQUEST_CONNECTIONS_FAILED';","import React from 'react';\nimport './Background.css'\n\nconst Background = () => {\n    return (\n        <div>\n            <div className=\"bg\"></div>\n            <div className=\"bg bg2\"></div>\n            <div className=\"bg bg3\"></div>\n        </div>\n        \n    );\n}\n\nexport default Background;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_CONNECTIONS_PENDING,\n    REQUEST_CONNECTIONS_SUCCESS,\n    REQUEST_CONNECTIONS_FAILED\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n};\n\nexport const searchConnections = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateConnections = {\n    isPending: false,\n    connections: [],\n    error: ''\n}\n\nexport const requestConnections = (state=initialStateConnections, action={}) => {\n    switch (action.type) {\n        case REQUEST_CONNECTIONS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_CONNECTIONS_SUCCESS:\n            return Object.assign({}, state, { connections: action.payload, isPending: false })\n        case REQUEST_CONNECTIONS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport Background from './components/Background';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport { searchConnections, requestConnections } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchConnections, requestConnections });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Background />\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}